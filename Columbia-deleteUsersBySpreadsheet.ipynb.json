{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Delete Users by List v 1.1\n",
    "\n",
    "This script removes an ArcGIS Pro license and deletes users as listed in a spreadsheet (userlist.csv). This script should fail if the user has any content, groups, or additional licenses in/on the account.\n",
    "\n",
    "To use this script:\n",
    "1. Update line 3 in the cell immediately below. Replace <INSERT_ORG_URL>\n",
    "2. In the subdirecty called \"data\", update the admincred.csv with the org's administrator username (column 1) and password (collumn 2). Be sure to save the spreadsheet file as a CSV.\n",
    "3. In the subdirectory called \"dadta\", update the userlist.csv with users to delete. Column 1 should contain usernamenames. \n",
    "\n",
    "-<a href=\"http://tbaker.com\" target=\"new\">Tom Baker</a>, April 2019. The ArcGIS API for Python v1.6.0 is current. Much of this code is adapted from Esri samples.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# ##### Add your parameters below ########################################\n",
    "# use full URL, eg http://mySchoolName.maps.arcgis.com\n",
    "orgurl = \"http://<INSERT_ORG_URL>.maps.arcgis.com\"   \n",
    "\n",
    "# set vars\n",
    "from arcgis.gis import GIS\n",
    "import pandas as pd\n",
    "\n",
    "creds_df = pd.read_csv('data/admincred.csv')\n",
    "creds_df = pd.DataFrame(creds_df)\n",
    "userlist_df = pd.read_csv('data/userlist.csv')\n",
    "users_df = pd.DataFrame(userlist_df)\n",
    "adminuser = creds_df.columns.values[0] # login for the admin account creating the new users\n",
    "adminpw = creds_df.columns.values[1]   # password for the admin account creating new users\n",
    "gis = GIS(orgurl, adminuser, adminpw)\n",
    "\n",
    "print(\"ok\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "# this block deletes users\n",
    "\n",
    "for index, row in users_df.iterrows(): \n",
    "    j = row['user']\n",
    "    if not gis.users.get(j):\n",
    "        print ('User does not exist: ' + row['user'])\n",
    "        break\n",
    "    else:\n",
    "        try:\n",
    "            pro_license = gis.admin.license.get('ArcGIS Pro')\n",
    "            pro_license.revoke(username=j, entitlements='*')\n",
    "            deluser = gis.users.get(j)\n",
    "            deluser.delete()\n",
    "            print('Deleted user: ', str(deluser.username))\n",
    "        except:\n",
    "            print('Error on delete: ', str(deluser.username))\n",
    "\n",
    "print('End of user deletion script.')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
